name: CI

on: [push]

jobs:
  scrapers:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: scrapers

    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - uses: actions/checkout@v2

    - name: Cache python packages
      uses: actions/cache@v2
      env:
        cache-name: cache-python-packages
      with:
        path: ${{ env.HOME }}/.cache/pypoetry
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-

    - name: Install poetry
      run: pip install poetry

    - name: Install dependencies
      run: poetry install

    - name: Lint with flake8
      run: make lint

    - name: Check types with mypy
      run: make types

    - name: Test with pytest
      run: make tests

  app:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app

    env:
      APP_ENV: testing
      DB_CONNECTION: sqlite
      DB_DATABASE: ':memory:'

    steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8'
        coverage: pcov

    - uses: actions/checkout@v2

    - name: Cache php packages
      uses: actions/cache@v2
      env:
        cache-name: cache-php-packages
      with:
        path: ./vendor
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-

    - name: Install dependencies
      run: composer install

    - name: Check code style with PHP CS Fixer
      run: composer cs

    - name: Test with pest
      run: composer test-with-coverage

    - name: Deploy coverage report to Netlify
      id: deploy-coverage
      uses: netlify/actions/cli@master
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      with:
        args: deploy --dir=./app/coverage-report --alias=${{ github.ref/\//- }}

    - name: Debug
      run: echo ${{ steps.deploy-coverage.outputs.NETLIFY_URL }}