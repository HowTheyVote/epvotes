name: CI
on: [push]

jobs:
  scrapers:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: scrapers

    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - uses: actions/checkout@v2

    - name: Cache python packages
      uses: actions/cache@v2
      env:
        cache-name: cache-python-packages
      with:
        path: ${{ env.HOME }}/.cache/pypoetry
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-

    - name: Install poetry
      run: pip install poetry

    - name: Install dependencies
      run: poetry install

    - name: Lint with flake8
      run: make lint

    - name: Check types with mypy
      run: make types

    - name: Test with pytest
      run: make tests

  app:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app

    env:
      APP_ENV: testing
      DB_CONNECTION: sqlite
      DB_DATABASE: ':memory:'

    steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8'
        coverage: pcov

    - uses: actions/checkout@v2

    - name: Cache php packages
      uses: actions/cache@v2
      env:
        cache-name: cache-php-packages
      with:
        path: ./vendor
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-

    - name: Install dependencies
      run: composer install

    - name: Check code style with PHP CS Fixer
      run: composer cs

    - name: Test with pest
      run: composer test-with-coverage

    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ${{ github.workspace }}/app/coverage-report

  deploy:
    needs: [app, scrapers]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ansible

    steps:
      - uses: actions/checkout@v2

      - run: |
          mkdir ~/.ssh
          echo "${{ secrets.EPVPROD_PUBLIC}}" >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install Ansible
        run: pip3 install ansible

      - name: Install Ansible collection
        run: ansible-galaxy collection install community.general

      - name: Create Ansible Vault password file
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ansible-vault.pass

      - name: Run Ansible playbook
        run: ansible-playbook site.yml -i ./hosts --vault-password-file ansible-vault.pass 

      - name: Delete secret files
        run: rm ansible-vault.pass && rm ~/.ssh/id_rsa
